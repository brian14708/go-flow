//go:build !skipflowtype
// +build !skipflowtype

// Code generated by github.com/brian14708/go-flow/flowtype/codegen. DO NOT EDIT.
package builtin

import (
	flowtype "github.com/brian14708/go-flow/flowtype"
	testutil "github.com/brian14708/go-flow/flowtype/testutil"
	"reflect"
	"testing"
)

func TestBuiltinBool(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg bool
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(bool) (_ bool) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(bool) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinComplex64(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg complex64
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(complex64) (_ complex64) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(complex64) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinComplex128(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg complex128
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(complex128) (_ complex128) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(complex128) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinError(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg error
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(error) (_ error) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(error) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinFloat32(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg float32
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(float32) (_ float32) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(float32) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinFloat64(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg float64
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(float64) (_ float64) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(float64) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinInt(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg int
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int) (_ int) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinInt8(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg int8
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int8) (_ int8) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int8) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinInt16(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg int16
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int16) (_ int16) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int16) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinInt32(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg int32
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int32) (_ int32) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int32) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinInt64(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg int64
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int64) (_ int64) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(int64) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinString(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg string
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(string) (_ string) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(string) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinUint(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg uint
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint) (_ uint) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinUint8(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg uint8
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint8) (_ uint8) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint8) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinUint16(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg uint16
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint16) (_ uint16) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint16) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinUint32(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg uint32
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint32) (_ uint32) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint32) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinUint64(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg uint64
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint64) (_ uint64) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uint64) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinUintptr(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg uintptr
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uintptr) (_ uintptr) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(uintptr) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestBuiltinInterface(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg interface{}
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(interface{}) (_ interface{}) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(interface{}) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}

func TestDispatchAnyMessage(t *testing.T) {
	testutil.TestWithNilRegistry(t, func(t *testing.T) {
		var arg flowtype.AnyMessage
		cnt := 0
		rtype := reflect.TypeOf(&arg).Elem()
		testutil.RunChanTest(t, rtype)
		{
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(flowtype.AnyMessage) (_ flowtype.AnyMessage) {
				cnt++
				return
			}, arg)
			testutil.RunFuncCallerTest(t, rtype, &cnt, func(flowtype.AnyMessage) (_ bool) {
				cnt++
				return
			}, arg)
		}
	})
}
